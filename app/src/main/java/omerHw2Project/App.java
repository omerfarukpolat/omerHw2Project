/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package omerHw2Project;

import static spark.Spark.get;
import static spark.Spark.port;
import static spark.Spark.post;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.*; 
import static spark.Spark.port;
import spark.ModelAndView;
import spark.template.mustache.MustacheTemplateEngine;


public class App {
    public String getGreeting() {
        return "Hello world.";
    }

    public static boolean search(ArrayList<Integer> array, int e) {
      System.out.println("inside search");
      if (array == null) return false;

      for (int elt : array) {
        if (elt == e) return true;
      }
      return false;
    }
    public static ArrayList<Integer> swap(ArrayList<Integer> list, int a, int b){
       
        if(list.size() == 0){
            throw new RuntimeException();
        }
        if(a == b){
            throw new RuntimeException();
        }
            for(int i = 0; i < list.size(); i++){
                if(list.get(i) == a) {
                    for(int j = list.size()-1; j > 0; j--){
                        if(list.get(j) == b){
                            list.set(i, b);
                            list.set(j,a);
                            return list;
                        }
                    }
                }
            }
            return list;
        }
    public static void main(String[] args) {

      port(getHerokuAssignedPort());
      int port = Integer.parseInt(System.getenv("PORT"));
      port(port);

        get("/", (req, res) -> "Hello, World");

        post("/compute", (req, res) -> {
          //System.out.println(req.queryParams("input1"));
          //System.out.println(req.queryParams("input2"));

          String input1 = req.queryParams("input1");
          java.util.Scanner sc1 = new java.util.Scanner(input1);
          sc1.useDelimiter("[;\r\n]+");
          java.util.ArrayList<Integer> inputList = new java.util.ArrayList<>();
          while (sc1.hasNext())
          {
            int value = Integer.parseInt(sc1.next().replaceAll("\\s",""));
            inputList.add(value);
          }
          sc1.close();
          System.out.println(inputList);

          String input2 = req.queryParams("input2");
          int value1 = 0;
          java.util.Scanner sc2 = new java.util.Scanner(input2);
          sc2.useDelimiter("[;\r\n]+");
          java.util.ArrayList<Integer> inputList2 = new java.util.ArrayList<>();
          while (sc2.hasNext())
          {
            value1 = Integer.parseInt(sc2.next().replaceAll("\\s",""));
          }
          sc2.close();
          System.out.println(value1);

          String input3 = req.queryParams("input3");
          int value2 = 0;
          java.util.Scanner sc3 = new java.util.Scanner(input3);
          sc3.useDelimiter("[;\r\n]+");
          java.util.ArrayList<Integer> inputList3 = new java.util.ArrayList<>();
          while (sc3.hasNext())
          {
            value2 = Integer.parseInt(sc3.next().replaceAll("\\s",""));
          }
          sc3.close();
          System.out.println(value2);
          System.out.println(inputList3);

          ArrayList<Integer> result = App.swap(inputList, value1,value2);

          Map<String, ArrayList<Integer>> map = new HashMap<String, ArrayList<Integer>>();
          map.put("result", result);
          return new ModelAndView(map, "compute.mustache");
        }, new MustacheTemplateEngine());


        get("/compute",
            (rq, rs) -> {
              Map<String, String> map = new HashMap<String, String>();
              map.put("result", "not computed yet!");
              return new ModelAndView(map, "compute.mustache");
            },
            new MustacheTemplateEngine());
    }

    static int getHerokuAssignedPort() {
      ProcessBuilder processBuilder = new ProcessBuilder();
      if (processBuilder.environment().get("PORT") != null) {
          return Integer.parseInt(processBuilder.environment().get("PORT"));
      }
      return 4567; //return default port if heroku-port isn't set (i.e. on localhost)
  }

}
